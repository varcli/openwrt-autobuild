name: build-phicomm-n1

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      rootfs_partsize:
        description: "请输入要编译固件大小 单位(MB)"
        required: false
        default: "1024"
      include_docker:
        description: "是否编译 Docker 插件"
        required: true
        default: "yes"
        type: choice
        options:
          - "yes"
          - "no"
      openwrt_kernel:
        description: "选择构建的内核(斐讯N1) 参考 https://github.com/breakingbadboy/OpenWrt/releases"
        required: false
        default: "6.1.y_6.6.y"
        type: choice
        options:
          - "6.1.y_6.6.y_6.12.y"
          - "6.1.y_6.6.y"
          - "6.6.y_6.12.y"
          - "5.4.y"
          - "5.10.y"
          - "5.15.y"
          - "6.1.y"
          - "6.6.y"
          - "6.12.y"
env:
  TZ: Asia/Shanghai
  ImageBuilderVersion: armsr-armv8-openwrt-24.10.3 # 详见https://hub.docker.com/r/immortalwrt/imagebuilder

jobs:
  build:
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        target: [phicomm-n1]

    steps:
      - name: 拉取仓库
        uses: actions/checkout@v4

      - name: 加载自定义配置
        run: |
          chmod +x ${{ github.workspace }}/${{ matrix.target }}/build.sh

      - name: 编译固件
        id: compile
        run: |
          size="${{ github.event.inputs.rootfs_partsize }}"
          include_docker="${{ github.event.inputs.include_docker }}"
          docker run --rm -i \
            --user root \
            -v "${{ github.workspace }}/bin:/home/build/immortalwrt/bin" \
            -v "${{ github.workspace }}/files:/home/build/immortalwrt/files" \
            -v "${{ github.workspace }}/${{ matrix.target }}/.config:/home/build/immortalwrt/.config" \
            -v "${{ github.workspace }}/shell:/home/build/immortalwrt/shell" \
            -v "${{ github.workspace }}/${{ matrix.target }}/build.sh:/home/build/immortalwrt/build.sh" \
            -e ROOTFS_PARTSIZE=$rootfs_partsize \
            -e INCLUDE_DOCKER=$include_docker \
            immortalwrt/imagebuilder:${{ env.ImageBuilderVersion }} /bin/bash /home/build/immortalwrt/build.sh

          echo "COMPILESTATUS=success" >> $GITHUB_ENV

      - name: 查找 rootfs.tar.gz 所在路径
        id: find_rootfs
        run: |
          ROOTFS_FILE=$(find bin/targets/*/*/ -type f -name "*rootfs.tar.gz" | head -n1)
          echo "✅ Found: $ROOTFS_FILE"
          if [ ! -f "$ROOTFS_FILE" ]; then
            echo "❌ 找不到 rootfs.tar.gz 文件"
            exit 1
          fi
          echo "file=$ROOTFS_FILE" >> $GITHUB_OUTPUT

      - name: 打包 Armvirt as ImmortalWrt for N1
        uses: ophub/flippy-openwrt-actions@main
        if: env.COMPILESTATUS == 'success' && !cancelled()
        env:
          OPENWRT_ARMVIRT: ${{ steps.find_rootfs.outputs.file }}
          PACKAGE_SOC: s905d
          KERNEL_VERSION_NAME: ${{ inputs.openwrt_kernel }}
          KERNEL_AUTO_LATEST: true
          WHOAMI: varcli

      - name: 整理文件
        id: files
        if: env.PACKAGED_STATUS == 'success' && !cancelled()
        run: |
          ls -l ${{ env.PACKAGED_OUTPUTPATH }}
          mkdir -p ${{ github.workspace }}/dist
          cp ${{ env.PACKAGED_OUTPUTPATH }}/** ${{ github.workspace }}/dist
          rm -rf ${{ github.workspace }}/dist/*-kernel.bin
          rm -rf ${{ github.workspace }}/dist/*.manifest
          rm -rf ${{ github.workspace }}/dist/*.json
          rm -rf ${{ github.workspace }}/dist/sha256sums
          ls -l ${{ github.workspace }}/dist

      - name: 生成release信息
        id: release_info
        if: env.COMPILESTATUS == 'success' && !cancelled()
        run: |
          echo "release_name=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "${{ matrix.target }} 固件" >> release.txt
          echo "内核版本 ${{ github.event.inputs.openwrt_kernel }}" >> release.txt
          if [ "${{ github.event.inputs.include_docker }}" == "yes" ]; then
            echo "带docker功能" >> release.txt
          fi
          echo "账户：root" >> release.txt
          echo "密码：无" >> release.txt

      - name: 发布固件
        id: release
        if: env.COMPILESTATUS == 'success' && !cancelled()
        uses: softprops/action-gh-release@v2
        with:
          # name: ${{ matrix.target }}⭐️${{ steps.release_info.outputs.release_name }}
          tag_name: ${{ matrix.target }}⭐️${{ steps.release_info.outputs.release_name }}
          body_path: release.txt
          files: |
            ${{ github.workspace }}/dist/**
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 清理Workflow
        if: env.COMPILESTATUS == 'success' && !cancelled()
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 7
          keep_minimum_runs: 3
