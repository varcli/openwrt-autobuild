name: build-x86-64

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      rootfs_partsize:
        description: '设置软件包大小 单位(MB)'
        required: false
        default: '1024'
      include_docker:
        description: '是否编译 Docker 插件'
        required: true
        default: 'no'
        type: choice
        options:
          - 'yes'
          - 'no'
env:
  ImageBuilderVersion: x86-64-openwrt-24.10  # 详见https://hub.docker.com/r/immortalwrt/imagebuilder

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: 拉取仓库
        uses: actions/checkout@v3

      - name: 加载自定义配置
        run: |
          chmod +x ${{ github.workspace }}/x86-64/build.sh

      - name: 编译固件
        id: compile
        run: |
          size="${{ github.event.inputs.rootfs_partsize }}"
          include_docker="${{ github.event.inputs.include_docker }}"
          docker run --rm -i \
            --user root \
            -v "${{ github.workspace }}/bin:/home/build/immortalwrt/bin" \
            -v "${{ github.workspace }}/files:/home/build/immortalwrt/files" \
            -v "${{ github.workspace }}/x86-64/imm.config:/home/build/immortalwrt/.config" \
            -v "${{ github.workspace }}/x86-64/build.sh:/home/build/immortalwrt/build.sh" \
            -e ROOTFS_PARTSIZE=$rootfs_partsize \
            -e INCLUDE_DOCKER=$include_docker \
            immortalwrt/imagebuilder:${{ env.ImageBuilderVersion }} /bin/bash /home/build/immortalwrt/build.sh

          echo "COMPILESTATUS=success" >> $GITHUB_ENV

      - name: 整理文件
        id: files
        run: |
          ls -l ${{ github.workspace }}/bin/targets/x86/64/
          mkdir -p ${{ github.workspace }}/dist
          cp ${{ github.workspace }}/bin/targets/x86/64/*squashfs-combined-efi.img.gz ${{ github.workspace }}/dist
          ls -l ${{ github.workspace }}/dist

      - name: 生成release信息
        id: release_info
        run: |
          echo "release_name=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "⭐️x86-64固件" >> release.txt
          if [ "${{ github.event.inputs.include_docker }}" == "yes" ]; then
            echo "带docker功能" >> release.txt
          fi
          echo "账户：root" >> release.txt
          echo "密码：无" >> release.txt

      - name: 发布固件
        id: release
        uses: ncipollo/release-action@main
        with:
          allowUpdates: true
          tag: x86_64🔥${{ steps.tag.outputs.release_name }}
          removeArtifacts: false
          token: ${{ secrets.GITHUB_TOKEN }}
          bodyFile: release.txt
          artifacts: ${{ github.workspace }}/dist

      - name: 清理Workflow
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 0

      - name: 清理Releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 10
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
